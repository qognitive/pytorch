{% import 'common.yml.j2' as common %}
{% import 'upload.yml.j2' as upload %}

{%- block name -%}
# Template is at:    .github/templates/linux_binary_build_workflow.yml.j2
# Generation script: .github/scripts/generate_ci_workflows.py
name: !{{ build_environment }}
{%- endblock %}


on:
  push:
  workflow_dispatch:
permissions:
  id-token: write   # This is required for requesting the JWT
  contents: read    # This is required for actions/checkout
env:
  # Needed for conda builds
  {%- if "aarch64" in build_environment %}
  ALPINE_IMAGE: "arm64v8/alpine"
  {%- elif "s390x" in build_environment %}
  ALPINE_IMAGE: "docker.io/s390x/alpine"
  {%- else %}
  ALPINE_IMAGE: "alpine"
  {%- endif %}
  AWS_DEFAULT_REGION: us-east-1
  BINARY_ENV_FILE: /tmp/env
  BUILD_ENVIRONMENT: !{{ build_environment }}
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  PR_NUMBER: ${{ github.event.pull_request.number }}
  PYTORCH_FINAL_PACKAGE_DIR: /artifacts
  PYTORCH_ROOT: /pytorch
  SHA1: ${{ github.event.pull_request.head.sha || github.sha }}
  SKIP_ALL_TESTS: 1
!{{ common.concurrency(build_environment) }}

jobs:
{%- for config in build_configs %}
  !{{ config["build_name"] }}-build:
    uses: ./.github/workflows/_binary-build-linux.yml
    with:!{{ upload.binary_env_as_input(config) }}
      {%- if "aarch64" in build_environment %}
      runner_prefix: "${{ needs.get-label-type.outputs.label-type }}"
      runs_on: linux.arm64.m7g.4xlarge.ephemeral
      ALPINE_IMAGE: "arm64v8/alpine"
      {%- elif "s390x" in build_environment %}
      runs_on: linux.s390x
      ALPINE_IMAGE: "docker.io/s390x/alpine"
      timeout-minutes: 420
      {%- elif "conda" in build_environment and config["gpu_arch_type"] == "cuda" %}
      runner_prefix: "${{ needs.get-label-type.outputs.label-type }}"
      runs_on: linux.24xlarge.ephemeral
      ALPINE_IMAGE: "alpine"
      {%- else %}
      ALPINE_IMAGE: "alpine"
      runner_prefix: "${{ needs.get-label-type.outputs.label-type }}"
      {%- endif %}
      build_name: !{{ config["build_name"] }}
      build_environment: !{{ build_environment }}
      {%- if config.pytorch_extra_install_requirements is defined and config.pytorch_extra_install_requirements|d('')|length > 0  %}
      PYTORCH_EXTRA_INSTALL_REQUIREMENTS: !{{ config.pytorch_extra_install_requirements }}
      {%- endif %}
      {%- if config["gpu_arch_type"] == "cuda-aarch64" %}
      timeout-minutes: 420
      {%- endif %}
    secrets:
      github-token: ${{ secrets.GITHUB_TOKEN }}

{%- if branches == "nightly" %}
  upload-to-gemfury:
    needs:
      - !{{ config["build_name"] }}-build
    runs-on: ubuntu-22.04
    steps:
      - name: Download Build Artifacts
        id: download-artifacts
        uses: actions/download-artifact@v4.1.7
        with:
          name: !{{ config["build_name"] }}
          path: "${{ runner.temp }}/artifacts/"
      - name: Configure aws credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          role-to-assume: arn:aws:iam::885886606610:role/GithubFullS3
          aws-region: "us-east-1"
      - name: print ls of artifacts
        run: ls ${{ runner.temp }}/artifacts
        shell: bash
      - name: upload a test file so that we know if it is working before building
        run: |
          aws s3 sync "${{ runner.temp }}/artifacts" s3://qognitive-package-store/pytorch/artifacts_test
      - name: install gemfury CLI
        run: |
          echo "deb [trusted=yes] https://apt.fury.io/cli/ * *" | sudo tee /etc/apt/sources.list.d/fury-cli.list
          sudo apt-get update
          sudo apt-get install fury-cli
        shell: bash
      - name: push wheel to gemfury
        run: fury push "${{ runner.temp }}/artifacts/$(ls ${{ runner.temp }}/artifacts -1)" --api-token ${{ secrets.GEMFURY_FULL_TOKEN }}
        shell: bash
{%- endif %}
{% endfor %}
